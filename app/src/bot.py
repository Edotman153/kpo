import asyncio
from open_lib import OpenLibraryAPI
from telegram.ext import Application, CommandHandler, MessageHandler, filters as Filters
from telegram import ReplyKeyboardMarkup, KeyboardButton
from google_books import GoogleBooksAPI
from db import Database
from dotenv import load_dotenv
import os

load_dotenv()

class BookBot:
    def __init__(self):
        self.google_api = GoogleBooksAPI()
        self.open_library_api = OpenLibraryAPI()
        self.db = Database()
        self.application = Application.builder().token(os.getenv("TELEGRAM_TOKEN")).build()
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –≤—Å–µ–≥–¥–∞
        self.reply_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton("üîç –ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏"), KeyboardButton("‚Ñπ –ü–æ–º–æ—â—å")],
                [KeyboardButton("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")]
            ],
            resize_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏"
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(MessageHandler(Filters.TEXT & ~Filters.COMMAND, self.handle_message))
        self.application.add_handler(MessageHandler(Filters.Regex(r'^üîç –ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏$'), self.handle_search_button))
    
    async def start(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
        await update.message.reply_text(
            "üìö –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–Ω–∏–∂–Ω—ã–π –±–æ—Ç!\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ:\n"
            "- –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É 'üîç –ü–æ–∏—Å–∫ –∫–Ω–∏–≥–∏' –∏ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
            "- –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –≤ —á–∞—Ç",
            reply_markup=self.reply_keyboard
        )
    
    async def handle_search_button(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞"""
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∞:",
            reply_markup=self.reply_keyboard
        )
    
    async def handle_message(self, update, context):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        
        if text.lower() in ["–ø–æ–º–æ—â—å", "‚Ñπ –ø–æ–º–æ—â—å"]:
            await self.start(update, context)
        elif text.lower() in ["–∏–∑–±—Ä–∞–Ω–Ω–æ–µ", "‚≠ê –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"]:
            await self.show_favorites(update, context)
        elif text.lower() == "üîç –ø–æ–∏—Å–∫ –∫–Ω–∏–≥–∏":
            await self.handle_search_button(update, context)
        else:
            # –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–ª–∏ —Ç–µ–∫—Å—Ç - —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –ø–æ–∏—Å–∫–æ–º –∫–Ω–∏–≥–∏
            await self.search_books(update, context, text)
    
    async def search_books(self, update, context, query):
        """–ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if not query:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏")
            return
        
        books = await self.google_api.search_books(query)
        
        if not books:
            books = await self.open_library_api.search_books(query)
            if not books:
                await update.message.reply_text("–ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üò¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å")
                return
        for book in books:
            msg = f"üìñ <b>{book['title']}</b>\nüë§ {book['authors']}\n\n{book['description'][:500]}..."
        
            if book.get("thumbnail"):
                await update.message.reply_photo(
                    photo=book["thumbnail"],
                    caption=msg,
                    parse_mode="HTML"
                )
            else:
                await update.message.reply_text(
                    msg,
                    parse_mode="HTML"
               )
    
    async def show_favorites(self, update, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏"""
        favorites = await self.db.get_favorites(update.effective_user.id)
        if not favorites:
            await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥")
            return
        
        for book in favorites:
            msg = f"‚≠ê <b>{book['title']}</b>\nüë§ {book['authors']}"
            await update.message.reply_text(msg, parse_mode="HTML")
    
    def run(self):
        self.application.run_polling()

if __name__ == "__main__":
    bot = BookBot()
    bot.run()
