import asyncio
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler
from telegram import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from google_books import GoogleBooksAPI
from open_lib import OpenLibraryAPI
from db import Database
from dotenv import load_dotenv
import os

load_dotenv()

class BookBot:
    def __init__(self):
        self.google_api = GoogleBooksAPI()
        self.open_lib_api = OpenLibraryAPI()
        self.db = Database()
        self.application = Application.builder().token(os.getenv("TELEGRAM_TOKEN")).build()
        
        self.reply_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton("‚Ñπ –ü–æ–º–æ—â—å")],
                [KeyboardButton("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")]
            ],
            resize_keyboard=True,
            input_field_placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏"
        )
        
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(MessageHandler(filters.Regex(r'^‚Ñπ –ü–æ–º–æ—â—å$'), self.help))
        self.application.add_handler(MessageHandler(filters.Regex(r'^‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ$'), self.show_favorites))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.search_books))
        self.application.add_handler(CallbackQueryHandler(self.handle_button_click))

    async def start(self, update, context):
        await update.message.reply_text(
            "üìö –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–Ω–∏–∂–Ω—ã–π –±–æ—Ç!\n\n"
            "–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞",
            reply_markup=self.reply_keyboard
        )

    async def help(self, update, context):
        await update.message.reply_text(
            "–í—ã –º–æ–∂–µ—Ç–µ:\n"
            "- –ò—Å–∫–∞—Ç—å –∫–Ω–∏–≥–∏, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥—è –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
            "- –î–æ–±–∞–≤–ª—è—Ç—å –∫–Ω–∏–≥–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥ –∫–Ω–∏–≥–æ–π\n"
            "- –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é\n"
            "- –£–¥–∞–ª—è—Ç—å –∫–Ω–∏–≥–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
            reply_markup=self.reply_keyboard
        )

    async def search_books(self, update, context):
        query = update.message.text
        if not query:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏")
            return
        
        try:
            books = await self.google_api.search_books(query)
            if not books:
                books = await self.open_lib_api.search_books(query)
                if not books:
                    await update.message.reply_text("–ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üò¢\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å")
                    return
            
            for book in books:
                book["user_id"] = update.effective_user.id
                
                msg = f"üìñ <b>{book['title']}</b>\nüë§ {book['authors']}\n\n{book.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')[:500]}..."
                
                keyboard = [[
                    InlineKeyboardButton("‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"add_{book['id']}")
                ]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                if book.get("thumbnail"):
                    await update.message.reply_photo(
                        photo=book["thumbnail"],
                        caption=msg,
                        parse_mode="HTML",
                        reply_markup=reply_markup
                    )
                else:
                    await update.message.reply_text(
                        msg,
                        parse_mode="HTML",
                        reply_markup=reply_markup
                    )
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")

    async def show_favorites(self, update, context):
        try:
            favorites = await self.db.get_favorites(update.effective_user.id)
            if not favorites:
                await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥")
                return
            
            for book in favorites:
                msg = f"‚≠ê <b>{book['title']}</b>\nüë§ {book['authors']}\n\n{book.get('description', '')[:300]}..."
                
                keyboard = [[
                    InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", callback_data=f"remove_{book['id']}")
                ]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                if book.get("thumbnail"):
                    await update.message.reply_photo(
                        photo=book["thumbnail"],
                        caption=msg,
                        parse_mode="HTML",
                        reply_markup=reply_markup
                    )
                else:
                    await update.message.reply_text(
                        msg,
                        parse_mode="HTML",
                        reply_markup=reply_markup
                    )
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
    async def handle_button_click(self, update, context):
        query = update.callback_query
        await query.answer()
    
        user_id = query.from_user.id
        data = query.data
    
        if data == "none":
            return
        
        try:
            action, book_id = data.split("_", 1)
        
            if action == "add":
                book_data = await self._get_book_data(book_id)
                if book_data:
                    book_data["user_id"] = user_id
                    await self.db.save_book(book_data)
                    await query.edit_message_reply_markup(
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("‚úÖ –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º", callback_data="none")]
                        ])
                    )
                else:
                    await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏", show_alert=True)
                
            elif action == "remove":
                success = await self.db.remove_favorite(user_id, book_id)
                if success:
                    await query.message.delete()
                else:
                    await query.answer("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º", show_alert=True)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏: {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)
    async def _get_book_data(self, book_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥–∏ –ø–æ ID (–∑–∞–≥–ª—É—à–∫–∞)"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –∏–ª–∏:
        # 1. –•—Ä–∞–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏ –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        # 2. –î–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ API –ø–æ book_id
        for book in getattr(self, 'last_search_results', []):
            if book.get('id') == book_id:
                return book
        return None
    def run(self):
        self.application.run_polling()

if __name__ == "__main__":
    bot = BookBot()
    bot.run()
