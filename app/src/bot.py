import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
import asyncio
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler
from telegram import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
#if __name__ == "__main__":
from google_books import GoogleBooksAPI
from open_lib import OpenLibraryAPI
from db import Database
from dotenv import load_dotenv
import logging
import requests

load_dotenv()

class BookBot:
    def __init__(self):
        self.google_api = GoogleBooksAPI()
        self.open_lib_api = OpenLibraryAPI()
        self.db = Database()
        self.application = Application.builder().token(os.getenv("TELEGRAM_TOKEN")).build()
        
        self.reply_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton("‚Ñπ –ü–æ–º–æ—â—å")],
                [KeyboardButton("‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")]
            ],
            resize_keyboard=True,
            input_field_placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏"
        )
        
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(MessageHandler(filters.Regex(r'^‚Ñπ –ü–æ–º–æ—â—å$'), self.help))
        self.application.add_handler(MessageHandler(filters.Regex(r'^‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ$'), self.show_favorites))
        self.application.add_handler(MessageHandler(filters.TEXT, self.search_books))
        self.application.add_handler(CallbackQueryHandler(self.handle_button_click))

    async def start(self, update, context):
        await update.message.reply_text(
            "üìö –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–Ω–∏–∂–Ω—ã–π –±–æ—Ç!\n\n"
            "–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞",
            reply_markup=self.reply_keyboard
        )

    async def help(self, update, context):
        await update.message.reply_text(
            "–í—ã –º–æ–∂–µ—Ç–µ:\n"
            "- –ò—Å–∫–∞—Ç—å –∫–Ω–∏–≥–∏, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥—è –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
            "- –î–æ–±–∞–≤–ª—è—Ç—å –∫–Ω–∏–≥–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥ –∫–Ω–∏–≥–æ–π\n"
            "- –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é\n"
            "- –£–¥–∞–ª—è—Ç—å –∫–Ω–∏–≥–∏ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
            reply_markup=self.reply_keyboard
        )

    async def search_books(self, update, context):
        query = update.message.text
        if not query:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏")
            return
        
        try:
            books = await self.google_api.search_books(query)
            if not books:
                books = await self.open_lib_api.search_books(query)
                if not books:
                    await update.message.reply_text("–ö–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üò¢\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å")
                    return
            
            for book in books:
                book["user_id"] = update.effective_user.id
                
                msg = f"üìñ <b>{book['title']}</b>\nüë§ {book['authors']}\n\n{book.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')[:500]}..."
                
                keyboard = [[
                    InlineKeyboardButton("‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"add_{book['id']}")
                ]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                if book.get("thumbnail"):
                    await update.message.reply_photo(
                        photo=book["thumbnail"],
                        caption=msg,
                        parse_mode="HTML",
                        reply_markup=reply_markup
                    )
                else:
                    await update.message.reply_text(
                        msg,
                        parse_mode="HTML",
                        reply_markup=reply_markup
                    )
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")

    async def show_favorites(self, update, context):
        try:
            favorites = await self.db.get_favorites(update.effective_user.id)
            if not favorites:
                await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥")
                return
            
            for book in favorites:
                msg = f"‚≠ê <b>{book['title']}</b>\nüë§ {book['authors']}\n\n{book.get('description', '')[:500]}..."
                
                keyboard = [[
                    InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ", callback_data=f"remove_{book['id']}")
                ]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                if book.get("thumbnail"):
                    await update.message.reply_photo(
                        photo=book["thumbnail"],
                        caption=msg,
                        parse_mode="HTML",
                        reply_markup=reply_markup
                    )
                else:
                    await update.message.reply_text(
                        msg,
                        parse_mode="HTML",
                        reply_markup=reply_markup
                    )
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")
    async def handle_button_click(self, update, context):
        query = update.callback_query
        await query.answer()
    
        user_id = query.from_user.id
        data = query.data
    
        if data == "none":
            return
        try:
            action, book_id = data.split("_", 1)
        
            if action == "add":
                book_data = await self._get_book_data(book_id)
                if book_data:
                    #print("if")        

                    book_data["user_id"] = user_id
                    await self.db.add_favorite(book_data)
                    await query.edit_message_reply_markup(
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("‚úÖ –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º", callback_data="none")]
                        ])
                    )
                else:
                    await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏", show_alert=True)
                
            elif action == "remove":
                success = await self.db.remove_favorite(user_id, book_id)
                if success:
                    await query.message.delete()
                else:
                    await query.answer("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º", show_alert=True)
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞: {e}")
    async def _get_book_data(self, book_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏ –ø–æ ID –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö API"""
        try:
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Google Books API
            if not book_id.startswith('OL'):  # Google Books ID –æ–±—ã—á–Ω–æ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å OL
                google_params = {
                    "key": os.getenv("GOOGLE_BOOKS_API_KEY"),
                    "q": f"{book_id}"
                }
                response = requests.get(self.google_api.BASE_URL, params=google_params)
                response.raise_for_status()
                data = response.json()
                if data.get('items'):
                    #print('items')
                    item = data['items'][0]
                    volume = item.get('volumeInfo', {})
                    return {
                        "id": item.get('id'),
                        "title": volume.get('title'),
                        "authors": ", ".join(volume.get('authors', ["–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"])),
                        "description": volume.get('description', "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"),
                        "thumbnail": volume.get('imageLinks', {}).get('thumbnail')
                    }
    
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ Google Books, –ø—Ä–æ–±—É–µ–º Open Library
            if book_id.startswith('OL') or not book_id:  # Open Library ID –æ–±—ã—á–Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å OL
                with self.open_lib_api.session.get(
                    f"{self.open_lib_api.BASE_URL}/works/{book_id}.json"
                ) as response:
                    response.raise_for_status()
                    work_data = response.json()
                    description = work_data.get('description')
                    if isinstance(description, dict):
                        description = description.get('value', "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ–±–ª–æ–∂–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ
                    cover_id = work_data.get('covers', [None])[0]
                    thumbnail = f"https://covers.openlibrary.org/b/id/{cover_id}-M.jpg" if cover_id else None
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–æ–≤
                    authors = []
                    if work_data.get('authors'):
                        for author in work_data['authors']:
                            if isinstance(author, dict) and author.get('author'):
                                author_key = author['author'].get('key')
                                if author_key:
                                    with self.open_lib_api.session.get(
                                        f"{self.open_lib_api.BASE_URL}{author_key}.json"
                                    ) as author_resp:
                                        author_resp.raise_for_status()
                                        author_data = author_resp.json()
                                        authors.append(author_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä'))
                    
                    return {
                        "id": book_id,
                        "title": work_data.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                        "authors": ", ".join(authors) if authors else "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω",
                        "description": description or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è",
                        "thumbnail": thumbnail
                    }
    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {e}")
        return None
    def run(self):
        self.application.run_polling()

if __name__ == "__main__":
    bot = BookBot()
    bot.run()

